---
- name: (Handler) Systemd daemon-reload
  ansible.builtin.systemd:
    daemon_reload: true

- name: (Handler) Start/reload NGINX
  ansible.builtin.service:
    name: nginx
    state: reloaded
    enabled: true
  when:
    - nginx_start | bool
    - nginx_state != 'absent'
    - not ansible_check_mode | bool
  listen: (Handler) Run NGINX

- name: (Handler) Check NGINX
  ansible.builtin.command:
    cmd: nginx -t
  args:
    chdir: "{{ ((ansible_facts['system'] | lower is not search('bsd')) | ternary('/etc/nginx', '/usr/local/sbin')) }}"
  register: config_check
  ignore_errors: true
  check_mode: false
  changed_when: false
  when: nginx_state != 'absent'
  listen: (Handler) Run NGINX

- name: (Handler) Print NGINX error if syntax check fails
  ansible.builtin.debug:
    var: config_check.stderr_lines
  failed_when: config_check['rc'] != 0
  when:
    - config_check['stderr_lines'] is defined
    - config_check['stderr_lines'] != []
    - config_check['rc'] != 0
    - nginx_state != 'absent'
  listen: (Handler) Run NGINX

- name: (Handler) Start NGINX Amplify agent
  ansible.builtin.service:
    name: amplify-agent
    state: started

- name: (Handler) Start logrotate
  ansible.builtin.command:
    cmd: logrotate -f /etc/logrotate.d/nginx
  register: logrotate_check
  ignore_errors: true
  check_mode: false
  changed_when: false
  listen: (Handler) Run logrotate

- name: (Handler) Print logrotate error if config check fails
  ansible.builtin.debug:
    var: logrotate_check.stderr_lines
  failed_when: logrotate_check['rc'] != 0
  when:
    - logrotate_check['stderr_lines'] is defined
    - logrotate_check['stderr_lines'] != []
    - logrotate_check['rc'] != 0
  listen: (Handler) Run logrotate
