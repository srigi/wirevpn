---
- name: (Alpine Linux) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository
  ansible.builtin.lineinfile:
    path: /etc/apk/repositories
    insertafter: EOF
    line: "{{ nginx_repository | default(nginx_default_repository_alpine) }}"
    state: "{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}"
  when: nginx_manage_repo | bool

- name: (Alpine Linux) {{ nginx_setup | capitalize }} NGINX
  community.general.apk:
    name: nginx{{ (nginx_repository is not defined and nginx_setup != 'uninstall') | ternary('@nginx', '') }}{{ nginx_version | default('') }}
    state: "{{ nginx_state }}"
    update_cache: true
  ignore_errors: "{{ ansible_check_mode }}"
  when: not (nginx_setup == 'upgrade' and nginx_version is not defined)
  notify: (Handler) Run NGINX

- name: (Alpine Linux) Upgrade NGINX workaround ('nginx_setup' is set to 'upgrade' and 'nginx_version' is not defined)
  when:
    - nginx_setup == 'upgrade'
    - nginx_version is not defined
  block:
    - name: (Alpine Linux) Check if there are NGINX upgrades available
      ansible.builtin.command: apk list --upgrade
      register: upgrade
      changed_when: false

    - name: (Alpine Linux) Upgrade NGINX
      ansible.builtin.command: apk add --upgrade nginx{{ nginx_repository is not defined | ternary('@nginx', '') }}
      changed_when: upgrade.stdout is search('nginx')
      when: upgrade.stdout is search('nginx')
      notify: (Handler) Run NGINX
